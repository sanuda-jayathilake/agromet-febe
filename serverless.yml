service: sls

custom:
  settings:
    USER_TABLE: user
    RAINFALL_TABLE: rainfall

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  environment: ${self:custom.settings}
  iamRoleStatements:
   - Effect: "Allow"
     Action:
        - dynamodb:DescribeTable
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
     Resource:
      - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.RAINFALL_TABLE}"
      - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.USER_TABLE}"

functions:
  register:
    handler: handler.registerUser
    events:
    - http:
        path: /user
        method: post
  createRainfallRecord:
    handler: handler.createRainFall
    events:
    - http:
        path: /rainfall
        method: post
  getAllRainfallRecords:
    handler: handler.getAllRainfallRecords
    events:
    - http:
        path: /rainfall
        method: get
resources:
  Resources:
    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.settings.USER_TABLE}
    RainfallTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: "id"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "id"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.settings.RAINFALL_TABLE}